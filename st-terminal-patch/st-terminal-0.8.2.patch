diff -rupN st-0.8.2-original/config.h st-0.8.2-patched/config.h
--- st-0.8.2-original/config.h	2019-02-09 09:50:41.000000000 -0200
+++ st-0.8.2-patched/config.h	2019-02-17 01:22:58.849730241 -0300
@@ -1,12 +1,18 @@
 /* See LICENSE file for copyright and license details. */
 
+/* ## patch usados ##
+st-blinking-cursor
+st-vertcenter
+*
+*/
+
 /*
  * appearance
  *
  * font: see http://freedesktop.org/software/fontconfig/fontconfig-user.html
  */
-static char *font = "Liberation Mono:pixelsize=12:antialias=true:autohint=true";
-static int borderpx = 2;
+static char *font = "Terminus:Bold:size=12:lcdfilter=lcddefault:hintstyle=hintslight:rgba=rgb:antialias=true:autohint=true";
+static int borderpx = 1;
 
 /*
  * What program is execed by st depends of these precedence rules:
@@ -16,7 +22,7 @@ static int borderpx = 2;
  * 4: value of shell in /etc/passwd
  * 5: value of shell in config.h
  */
-static char *shell = "/bin/sh";
+static char *shell = "/bin/zsh";
 char *utmp = NULL;
 char *stty_args = "stty raw pass8 nl -echo -iexten -cstopb 38400";
 
@@ -32,7 +38,7 @@ static float chscale = 1.0;
  *
  * More advanced example: " `'\"()[]{}"
  */
-char *worddelimiters = " ";
+char *worddelimiters = " '`\"()[]{}<>|-";
 
 /* selection timeouts (in milliseconds) */
 static unsigned int doubleclicktimeout = 300;
@@ -84,31 +90,30 @@ unsigned int tabspaces = 8;
 
 /* Terminal colors (16 first used in escape sequence) */
 static const char *colorname[] = {
-	/* 8 normal colors */
-	"black",
-	"red3",
-	"green3",
-	"yellow3",
-	"blue2",
-	"magenta3",
-	"cyan3",
-	"gray90",
-
-	/* 8 bright colors */
-	"gray50",
-	"red",
-	"green",
-	"yellow",
-	"#5c5cff",
-	"magenta",
-	"cyan",
-	"white",
-
-	[255] = 0,
-
-	/* more colors can be added after 255 to use with DefaultXX */
-	"#cccccc",
-	"#555555",
+    "#000000", /*   0: black     */
+    "#AA0000", /*   1: red       */
+    "#00AA00", /*   2: green     */
+    "#AA5500", /*   3: yellow    */
+    "#0000AA", /*   4: blue      */
+    "#AA00AA", /*   5: magenta   */
+    "#00AAAA", /*   6: cyan      */
+    "#AAAAAA", /*   7: white     */
+    "#555555", /*   8: brblack   */
+    "#FF5555", /*   9: brred     */
+    "#55FF55", /*  10: brgreen   */
+    "#FFFF55", /*  11: bryellow  */
+    "#5555FF", /*  12: brblue    */
+    "#FF55FF", /*  13: brmagenta */
+    "#55FFFF", /*  14: brcyan    */
+    "#FFFFFF", /*  15: brwhite   */
+
+    [255] = 0,
+
+    /* more colors can be added after 255 to use with DefaultXX */
+    "#cccccc",
+    "#555555",
+    "black",
+    "#00AAAA",
 };
 
 
@@ -116,19 +121,21 @@ static const char *colorname[] = {
  * Default colors (colorname index)
  * foreground, background, cursor, reverse cursor
  */
-unsigned int defaultfg = 7;
-unsigned int defaultbg = 0;
+unsigned int defaultfg = 259;
+unsigned int defaultbg = 258;
 static unsigned int defaultcs = 256;
 static unsigned int defaultrcs = 257;
 
 /*
  * Default shape of cursor
+ * 1: Blinking Block ("█")
  * 2: Block ("█")
+ * 3: Blinking Underline ("_")
  * 4: Underline ("_")
  * 6: Bar ("|")
  * 7: Snowman ("☃")
  */
-static unsigned int cursorshape = 2;
+static unsigned int cursorshape = 3;
 
 /*
  * Default columns and rows numbers
diff -rupN st-0.8.2-original/x.c st-0.8.2-patched/x.c
--- st-0.8.2-original/x.c	2019-02-09 09:50:41.000000000 -0200
+++ st-0.8.2-patched/x.c	2019-02-17 01:41:58.672797077 -0300
@@ -80,6 +80,7 @@ typedef struct {
 	int w, h; /* window width and height */
 	int ch; /* char height */
 	int cw; /* char width  */
+	int cyo; /* char y offset */
 	int mode; /* window state/mode flags */
 	int cursor; /* cursor style */
 } TermWindow;
@@ -955,6 +956,7 @@ xloadfonts(char *fontstr, double fontsiz
 	/* Setting character width and height. */
 	win.cw = ceilf(dc.font.width * cwscale);
 	win.ch = ceilf(dc.font.height * chscale);
+	win.cyo = ceilf(dc.font.height * (chscale - 1) / 2);
 
 	FcPatternDel(pattern, FC_SLANT);
 	FcPatternAddInteger(pattern, FC_SLANT, FC_SLANT_ITALIC);
@@ -1136,7 +1138,7 @@ xmakeglyphfontspecs(XftGlyphFontSpec *sp
 	FcCharSet *fccharset;
 	int i, f, numspecs = 0;
 
-	for (i = 0, xp = winx, yp = winy + font->ascent; i < len; ++i) {
+	for (i = 0, xp = winx, yp = winy + font->ascent + win.cyo; i < len; ++i) {
 		/* Fetch rune and mode for current glyph. */
 		rune = glyphs[i].u;
 		mode = glyphs[i].mode;
@@ -1161,7 +1163,7 @@ xmakeglyphfontspecs(XftGlyphFontSpec *sp
 				font = &dc.bfont;
 				frcflags = FRC_BOLD;
 			}
-			yp = winy + font->ascent;
+			yp = winy + font->ascent + win.cyo;
 		}
 
 		/* Lookup character index with default font. */
@@ -1377,12 +1379,12 @@ xdrawglyphfontspecs(const XftGlyphFontSp
 
 	/* Render underline and strikethrough. */
 	if (base.mode & ATTR_UNDERLINE) {
-		XftDrawRect(xw.draw, fg, winx, winy + dc.font.ascent + 1,
+		XftDrawRect(xw.draw, fg, winx, winy + win.cyo + dc.font.ascent + 1,
 				width, 1);
 	}
 
 	if (base.mode & ATTR_STRUCK) {
-		XftDrawRect(xw.draw, fg, winx, winy + 2 * dc.font.ascent / 3,
+		XftDrawRect(xw.draw, fg, winx, winy + win.cyo + 2 * dc.font.ascent / 3,
 				width, 1);
 	}
 
@@ -1445,11 +1447,17 @@ xdrawcursor(int cx, int cy, Glyph g, int
 		case 7: /* st extension: snowman (U+2603) */
 			g.u = 0x2603;
 		case 0: /* Blinking Block */
+		  if (IS_SET(MODE_BLINK))
+		  	break;
 		case 1: /* Blinking Block (Default) */
+		  if (IS_SET(MODE_BLINK))
+		  	break;
 		case 2: /* Steady Block */
 			xdrawglyph(g, cx, cy);
 			break;
 		case 3: /* Blinking Underline */
+		  if (IS_SET(MODE_BLINK))
+		  	break;
 		case 4: /* Steady Underline */
 			XftDrawRect(xw.draw, &drawcol,
 					borderpx + cx * win.cw,
@@ -1458,6 +1466,8 @@ xdrawcursor(int cx, int cy, Glyph g, int
 					win.cw, cursorthickness);
 			break;
 		case 5: /* Blinking bar */
+		  if (IS_SET(MODE_BLINK))
+		  	break;
 		case 6: /* Steady bar */
 			XftDrawRect(xw.draw, &drawcol,
 					borderpx + cx * win.cw,
@@ -1806,11 +1816,9 @@ run(void)
 		}
 		if (FD_ISSET(ttyfd, &rfd)) {
 			ttyread();
-			if (blinktimeout) {
-				blinkset = tattrset(ATTR_BLINK);
-				if (!blinkset)
-					MODBIT(win.mode, 0, MODE_BLINK);
-			}
+			blinkset = blinktimeout || tattrset(ATTR_BLINK);
+			if (!blinkset)
+			  MODBIT(win.mode, 0, MODE_BLINK);
 		}
 
 		if (FD_ISSET(xfd, &rfd))
@@ -1839,8 +1847,11 @@ run(void)
 				XNextEvent(xw.dpy, &ev);
 				if (XFilterEvent(&ev, None))
 					continue;
-				if (handler[ev.type])
-					(handler[ev.type])(&ev);
+				if (handler[ev.type]) {
+				  	(handler[ev.type])(&ev);
+					lastblink = now;
+					if (IS_SET(MODE_BLINK)) MODBIT(win.mode, 0, MODE_BLINK);
+				}
 			}
 
 			draw();
